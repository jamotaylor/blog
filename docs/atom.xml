<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James Newton Taylor</title>
  
  <subtitle>Developer // Designer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.newtonworkshop.com/"/>
  <updated>2019-03-04T19:37:38.738Z</updated>
  <id>https://blog.newtonworkshop.com/</id>
  
  <author>
    <name>James Newton Taylor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SA Game Jam 2018 - Cannon Bowls</title>
    <link href="https://blog.newtonworkshop.com/2019/02/25/sa-game-jam-2018/"/>
    <id>https://blog.newtonworkshop.com/2019/02/25/sa-game-jam-2018/</id>
    <published>2019-02-25T18:45:34.000Z</published>
    <updated>2019-03-04T19:37:38.738Z</updated>
    
    <content type="html"><![CDATA[<p>Last year September, I managed to get out the house for the weekend and participate in the <a href="http://makegamessa.com/discussion/5375/sa-game-jam-2018" target="_blank" rel="noopener">SA Game Jam 2018</a>   (thanks to my amazing wife for looking after our kids). What is a <a href="https://en.wikipedia.org/wiki/Game_jam" target="_blank" rel="noopener">game jam</a>? Basically when people get together, either physically or across the wires, to make games together - video games, board games, whatever tickles your fancy.</p><p>If you want to skip all the detail and get to the juicy bits with a <strong>video</strong> and <strong>stuff that I learnt</strong>, then <a href="#The-Finished-Entry">look no further</a>.</p><p>Someone from the <a href="http://makegamessa.com/" target="_blank" rel="noopener">Make Games SA forum</a> organized a venue for the weekend.  It was on the 25th and top floor of an old apartheid-era office building composed of face-brick and concrete, that looks like it was once a fortress protecting government secrets, but is now occupied by a few hipster startups - like the friendly dudes that hosted us - thank you <a href="https://newreality.co.za/" target="_blank" rel="noopener">New Reality</a> for all the coffee and beer!!!</p><img src="/2019/02/25/sa-game-jam-2018/25-owl-street-view.jpg" title="No 25 Owl Street View"><blockquote><p>There was an great view awaiting if you needed to get out for some air.</p></blockquote><p>We arrived on Friday from all corners of Johannesburg and proceeded to meet people who we may or may not have bumped into on the forums. The theme was announced at 6pm: Escalating Possibilities, and we all set about wracking our brains and offering strong opinions on our interpretations (and why our interpretation was the right one). The game jam hosts - <a href="https://freelives.net/" target="_blank" rel="noopener">Free Lives</a> - released a <a href="https://youtu.be/Kr9ndYeE_s4" target="_blank" rel="noopener">not-so-short video clip</a> to explain the theme if you want to check it out here.</p><img src="/2019/02/25/sa-game-jam-2018/25-owl-street-interior.jpg"><blockquote><p>The entrance and the office interior - there weren‚Äôt a ton of us there, but that made for a nice vibe.</p></blockquote><p>A bit later, someone had the smart idea of having a little pow wow to introduce ourselves and our skills, and discuss our burgeoning ideas. I had initially planned to rock up at the venue and form a team with some other peeps, but there didn‚Äôt seem to be anyone available that had the skills I needed (this turned out to a be a mistake), so I decided to soldier on alone.</p><h2 id="Development-begins‚Ä¶"><a href="#Development-begins‚Ä¶" class="headerlink" title="Development begins‚Ä¶"></a>Development begins‚Ä¶</h2><p>Having worked as a creative for many years, I know that idea generation can suck up a lot of time if you‚Äôre not careful - there‚Äôs nothing wrong with exploring ideas, but when you‚Äôve got a tight deadline and nothing new is coming to you, it‚Äôs usually best just to go with your first idea, which, after a couple hours of brainstorming and inspiration seeking, is what I did.</p><p>My basic idea was to have some sort of bomb that you could launch at enemies.  Properties relating to the explosion of the bomb, the physics of the bomb capsule and launching the bomb - such as force, bounciness, weight, angle, power, etc. - would evolve as the game continued.</p><p>At some point the bomb became an exploding bowling ball launched from a cannon and enemies became bowling pins. What I loved most about this idea was that it took a violent concept and made it quite benign (I‚Äôm not a big fan of violent games), it also immediately gave me a title - <strong>Cannon Bowls!</strong></p><p>The bowling idea came from a friend that I met at the jam, and this is where I began to learn the lesson that teams are better for these things.  My new friend was not only full of good ideas and feedback on the game, he also ended up modelling up the cannon and the bowling pins for me, and sourcing and tweaking all the sounds (more on sound later).</p><p>I ended up using a wave-based survival mechanic for progression in the game. After surviving each timed wave you can choose a random ‚Äúupgrade‚Äù which changes one of the aforementioned properties. You survive the wave but not letting any enemies (bowling pins) past the line where you cannon if firing - however this functionality didn‚Äôt ever actually make it into the game, and so you literally cannot lose!</p><p>Properties like <em>Tilt</em> and <em>Power</em> are applied to the cannon and allow the player to control those aspects, whereas properties like <em>Bounce</em> and <em>LandMine</em> change the way the bomb behaves. The order in which you receive the upgrades determines the order in which they interact.</p><p>I liked the random rewards so that players had a different game experience in each play-through, but because a play-through ended up being quite long (about 15mins), this idea didn‚Äôt really work. Most people would only play the game through once - if they even finished it at all.</p><p>One of the funnier things that ended up happening is that my overpowered cannon would flatten about 1000 skittles and all these skittles would then lie around on the floor, making it impossible to actually play the game. I had to do some clever but terrible code to allow standing skittles to push past ‚Äúdead‚Äù ones. Then, at the last minute I had to implement <em>The Amazing Rotating Floor</em> to clear all the skittles from the previous wave. I quite like how this looks, it ended up giving the game a little character.</p><img src="/2019/02/25/sa-game-jam-2018/bowling-pin-mess.jpg"><blockquote><p>Bowling pins filling up the floor space</p></blockquote><p>From the moment I started coding it was hard to go to bed - partly for fear of not finishing, and partly because it was so rewarding to see the progress.  I spent about 43 (check hours) hours that weekend developing the game - and I captured my screen throughout the process. Here is the video of my development - which can be a bit boring in parts‚Ä¶ at least I find it interesting üòâ</p><div class="video-container"><iframe src="//www.youtube.com/embed/4E9M1mzXz18" frameborder="0" allowfullscreen></iframe></div><h2 id="The-Finished-Entry"><a href="#The-Finished-Entry" class="headerlink" title="The Finished Entry"></a>The Finished Entry</h2><p>After all that, I didn‚Äôt make the Sunday evening cut-off, and so the following day, amidst watching the kids in the garden, changing nappies and etc., I did manage to submit a 3-day entry with a <a href="https://jamotaylor.itch.io/cannon-bowls-sa-game-jam-2018" target="_blank" rel="noopener">playable version of the game</a>.</p><p>Here is a short gameplay video of the final thing:</p><div class="video-container"><iframe src="//www.youtube.com/embed/OsUEctoJolU" frameborder="0" allowfullscreen></iframe></div><h2 id="What-I-Learnt"><a href="#What-I-Learnt" class="headerlink" title="What I Learnt"></a>What I Learnt</h2><h3 id="1-Don‚Äôt-be-fancy-be-fast"><a href="#1-Don‚Äôt-be-fancy-be-fast" class="headerlink" title="1. Don‚Äôt be fancy, be fast"></a>1. Don‚Äôt be fancy, be fast</h3><p>Initially I tried to design an amazing bomb property applicator class using an inheritance hierarchy and an abstract factory and a whole bunch of fancy programmery stuff. That was a terrible waste of time because I couldn‚Äôt resolve the design in time and I kept coming up against the Unity class structure.</p><p>In the end, I decided to embrace Unity‚Äôs architecture and just duplicate a bit of code, and lose some type-safety, and drop the whole factory idea - which really isn‚Äôt so bad when you‚Äôre doing a game jam.  If I had done this from the beginning, I might have saved myself 6 hours or even more.</p><p>So, don‚Äôt be fancy, embrace the limitations of your chosen engine or framework and focus on producing fast code, not good code. This goes against all my principles, but represents the tension between the urgency of functionality versus the importance of structure, and it was a good exercise for me to have to focus on the former.</p><h3 id="2-Set-up-for-success"><a href="#2-Set-up-for-success" class="headerlink" title="2. Set up for success"></a>2. Set up for success</h3><p>Don‚Äôt try to create a spawning pool at the jam. Don‚Äôt try to create a sound manager at the jam. Don‚Äôt try to create a UI framework at the jam. Of course not - who would be so ridiculous? Well, me.</p><p>There is nothing wrong with using 3rd party tools or code that you have written previously. No one expects every bit of code in your game to be written at the jam - if we were to apply that logic, then game engines would be out too, and we‚Äôd all end up producing very bad versions of pong in a weekend. That said, it takes some time and preparation to gather these tools and check that they are working before the jam starts.</p><p><strong>I would recommend setting up the following beforehand:</strong></p><ol><li><strong>Update your game engine of choice</strong></li><li><strong>Create a basic startup project</strong> - this should have:<ul><li>a basic UI system with at least a main menu and an exit button</li><li>a spawning pool</li><li>a character with a control system</li><li>a couple of camera systems - 2D, first person, 3rd person etc.</li><li>a sound manager (possibly even some generic sounds as placeholders)</li><li>a few simple visual effects (that can be updated with custom artwork)</li></ul></li><li><strong>Test that builds work</strong> - make sure that you can build to your desired platform/s and that the any 3rd party libraries that you‚Äôre using don‚Äôt break.</li><li><strong>Create a web page</strong> that you‚Äôre going to be publishing to (such as <a href="https://itch.io" target="_blank" rel="noopener">itch.io</a>) - that‚Äôs assuming you‚Äôre publishing online. You can add details of your team and the jam itself even before you know the theme.</li></ol><p>Whether you end up using all the parts of you startup project or none of it doesn‚Äôt matter. If you‚Äôre using a game engine like Unity can could take this quite far and have a basic 2D template and a basic 3D template with some basic geometry, tags and layers set up already.</p><p>Bear in mind that any third-party or previously created assets are most likely going to disqualify from a prize in that category, but as long as you state it in your entry, it should be fine to use whatever royalty-free assets you can find.</p><h3 id="3-Balance-and-feeling"><a href="#3-Balance-and-feeling" class="headerlink" title="3. Balance and feeling"></a>3. Balance and feeling</h3><p>Leave time to balance and tune your game. This is a fine art and one that I have only scraped the surface of - the big studios take balance very seriously (even more so since professional e-sports), using all kinds of mathematics that goes above my head.  I should probably have left 4 hours or more at the end just to work on this, playing through the game over and over, tweaking parameters and polishing the experience here and there - and this is what I would recommend in a 48 to 72-hour jam.</p><!-- ## Hook up and have funDon't be too protective of your ideas or your project - be that code or artwork. You have a much better chance of putting up something in time, and having fun doing it, if you work in a team - and you might make a buddy in the process. In my case, I went solo partly to prove a point to myself that I could do it all from artwork to code to finished product. But, seeing as I ended up needing help anyway, I now see that working in a team would probably have been a lot more fun if I had just had let go a little. --><h2 id="TODO"><a href="#TODO" class="headerlink" title="// TODO"></a>// TODO</h2><p>There‚Äôs a lot that I would still love to polish in the game - first and foremost the horrible menu that had to go in as is ü§¶‚Äç, and then it needs some serious juice with the art and effects‚Ä¶ oh and the sound is so horrible - should probably just remove that! What I need is a follow-up game jam - an uninterrupted 48 hours to dive in again. üòé</p><p>I think the concept has potential - the most positive feedback I got was that it was fun to play and people genuinely didn‚Äôt want to stop‚Ä¶ until they stopped and went to look at someone elses game. I can see it being quite fun as a casual game on tablet.</p><p>If you love to code but you‚Äôve never done a game jam before, I highly recommend it. And if you‚Äôve never made a game before, then why not rock up at the meetup and work through a start-to-finish game tutorial such as the ones Unity make available (<a href="https://unity3d.com/learn/tutorials/s/roll-ball-tutorial" target="_blank" rel="noopener">like this</a>, <a href="https://unity3d.com/learn/tutorials/s/space-shooter-tutorial" target="_blank" rel="noopener">and this</a>, <a href="https://unity3d.com/learn/tutorials/s/survival-shooter-tutorial" target="_blank" rel="noopener">and also this</a>). That way, you have some more experienced game developers around to help if you get stuck. You can even submit your finished tutorial if the rules allow it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Last year September, I managed to get out the house for the weekend and participate in the &lt;a href=&quot;http://makegamessa.com/discussion/537
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Serializing *Specified Fields in .NET</title>
    <link href="https://blog.newtonworkshop.com/2019/02/04/serializing-specified-fields/"/>
    <id>https://blog.newtonworkshop.com/2019/02/04/serializing-specified-fields/</id>
    <published>2019-02-04T13:08:00.000Z</published>
    <updated>2019-02-22T15:24:54.261Z</updated>
    
    <content type="html"><![CDATA[<p>So I had an issue at work this week with some of our serialized fields missing (and yes, I do spell serialized the American way).  Turns out it was a very sneaky little thing indeed‚Ä¶</p><p>As far as serialization goes in .NET, I‚Äôm used to using attributes to specify fields which should be ignored or serialized with special conditions (e.g. the <em>[System.Xml.Serialization.XmlIgnore]</em> attribute), I had no idea about this sneaky convention:</p><blockquote><p>When you have a property in a class (e.g. <em>Name</em>) and a corresponding <strong>boolean</strong> property that <strong>ends with ‚ÄúSpecified‚Äù</strong> (e.g. <em>NameSpecified</em>), the first property <strong>will not be serialized</strong> unless the <strong>*Specified</strong> property is set to <strong>true</strong>.</p></blockquote><p>This works for both JSON.NET and the built in <em>System.Xml.Serialization.XmlSerializer</em>, and I‚Äôm sure there are a bunch of other libraries where the convention is used.</p><p>There is a post about this on <a href="https://stackoverflow.com/questions/6711906/net-why-must-i-use-specified-property-to-force-serialization-is-there-a-way" target="_blank" rel="noopener">Stack Overflow</a>, but it didn‚Äôt go into enough detail for me, and I wasn‚Äôt sure whether this was an actual convention or something that was achieved through attributes or some other magic.</p><p>In order to test it out, I created a little‚Ä¶ uh‚Ä¶ test.</p><h2 id="The-Serialization-Tests"><a href="#The-Serialization-Tests" class="headerlink" title="The Serialization Tests"></a>The Serialization Tests</h2><p>Let‚Äôs start with a simple <a href="https://en.wikipedia.org/wiki/Passive_data_structure" target="_blank" rel="noopener">POD</a> class:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">jnt.Serialization</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Message</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> MessageType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> MessageTypeSpecified &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MessageCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> MessageCodeSpecified &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can, see, no attributes, no Data Members or Data Contracts, nothing fancy - just plain old public properties.</p><p>Now to write some basic serialization and some tests - again, the serialization is standard, out-of-box functionality.</p><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><h4 id="The-XML-serializer"><a href="#The-XML-serializer" class="headerlink" title="The XML serializer"></a>The XML serializer</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">jnt.Serialization</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XmlSerializer</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Serialize&lt;T&gt;(T toSerialize)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> serializer = <span class="keyword">new</span> System.Xml.Serialization.XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">      <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">using</span> (<span class="keyword">var</span> xmlWriter = XmlWriter.Create(sb, <span class="keyword">new</span> XmlWriterSettings &#123; Indent = <span class="literal">true</span> &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        serializer.Serialize(xmlWriter, toSerialize);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="The-XML-serializer-tests"><a href="#The-XML-serializer-tests" class="headerlink" title="The XML serializer tests"></a>The XML serializer tests</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"><span class="keyword">using</span> jnt.Serialization;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">jnt.RandomTests</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">TestClass</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XmlSerializer_Tests</span></span><br><span class="line">  &#123;</span><br><span class="line">    [<span class="meta">TestMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_Without_Specified</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">var</span> message = <span class="keyword">new</span> Message</span><br><span class="line">      &#123;</span><br><span class="line">        MessageCode = <span class="number">1234567890</span>,</span><br><span class="line">        MessageType = <span class="string">"Save Our Souls"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      Console.WriteLine(<span class="keyword">new</span> XmlSerializer().Serialize(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">TestMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_With_Specified</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">var</span> message = <span class="keyword">new</span> Message</span><br><span class="line">      &#123;</span><br><span class="line">        MessageCode = <span class="number">1234567890</span>,</span><br><span class="line">        MessageCodeSpecified = <span class="literal">true</span>,</span><br><span class="line">        MessageType = <span class="string">"Save Our Souls"</span>,</span><br><span class="line">        MessageTypeSpecified = <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">      Console.WriteLine(<span class="keyword">new</span> XmlSerializer().Serialize(message));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="XML-result-with-Specified-properties-true"><a href="#XML-result-with-Specified-properties-true" class="headerlink" title="XML result with Specified properties true*"></a>XML result with <em>Specified properties </em>true*</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-16"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Message</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MessageType</span>&gt;</span>Save Our Souls<span class="tag">&lt;/<span class="name">MessageType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MessageTypeSpecified</span>&gt;</span>true<span class="tag">&lt;/<span class="name">MessageTypeSpecified</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MessageCode</span>&gt;</span>1234567890<span class="tag">&lt;/<span class="name">MessageCode</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MessageCodeSpecified</span>&gt;</span>true<span class="tag">&lt;/<span class="name">MessageCodeSpecified</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Message</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="XML-result-with-Specified-properties-false"><a href="#XML-result-with-Specified-properties-false" class="headerlink" title="XML result with Specified properties false*"></a>XML result with <em>Specified properties </em>false*</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-16"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Message</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MessageTypeSpecified</span>&gt;</span>false<span class="tag">&lt;/<span class="name">MessageTypeSpecified</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MessageCodeSpecified</span>&gt;</span>false<span class="tag">&lt;/<span class="name">MessageCodeSpecified</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Message</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h4 id="The-JSON-serializer"><a href="#The-JSON-serializer" class="headerlink" title="The JSON serializer"></a>The JSON serializer</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">jnt.Serialization</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonSerializer</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Serialize</span>(<span class="params"><span class="keyword">object</span> toSerialize</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">return</span> JsonConvert.SerializeObject(toSerialize, Formatting.Indented);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON-serializer-tests"><a href="#JSON-serializer-tests" class="headerlink" title="JSON serializer tests"></a>JSON serializer tests</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> jnt.Serialization;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">jnt.RandomTests</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">TestClass</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonSerializer_Tests</span></span><br><span class="line">  &#123;</span><br><span class="line">    [<span class="meta">TestMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_Without_Specified</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">var</span> message = <span class="keyword">new</span> Message</span><br><span class="line">      &#123;</span><br><span class="line">        MessageCode = <span class="number">1234567890</span>,</span><br><span class="line">        MessageType = <span class="string">"Save Our Souls"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      Console.WriteLine(<span class="keyword">new</span> JsonSerializer().Serialize(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">TestMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_With_Specified</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">var</span> message = <span class="keyword">new</span> Message</span><br><span class="line">      &#123;</span><br><span class="line">        MessageCode = <span class="number">1234567890</span>,</span><br><span class="line">        MessageCodeSpecified = <span class="literal">true</span>,</span><br><span class="line">        MessageType = <span class="string">"Save Our Souls"</span>,</span><br><span class="line">        MessageTypeSpecified = <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">      Console.WriteLine(<span class="keyword">new</span> JsonSerializer().Serialize(message));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON-result-with-Specified-properties-set-true"><a href="#JSON-result-with-Specified-properties-set-true" class="headerlink" title="JSON result with Specified properties set true*"></a>JSON result with <em>Specified properties set </em>true*</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"MessageType"</span>: <span class="string">"Save Our Souls"</span>,</span><br><span class="line">  <span class="attr">"MessageTypeSpecified"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"MessageCode"</span>: <span class="number">1234567890</span>,</span><br><span class="line">  <span class="attr">"MessageCodeSpecified"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON-result-with-Specified-properties-set-false"><a href="#JSON-result-with-Specified-properties-set-false" class="headerlink" title="JSON result with Specified properties set false*"></a>JSON result with <em>Specified properties set </em>false*</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"MessageTypeSpecified"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"MessageCodeSpecified"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So, this is definitely some sort of convention. I couldn‚Äôt find anything in the MSDN docs about this, or anything in the <a href="https://www.newtonsoft.com/json/help/html/Introduction.htm" target="_blank" rel="noopener">Json.NET docs</a>. Perhaps it is there <em>somewhere</em>‚Ä¶</p><p>Of course, if you wanted to use this feature, you would most likely hide the *Specified properties in your serialized output using an attribute.</p><p>Let me know in the comments below if you were aware of this and if you have any links to more info.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So I had an issue at work this week with some of our serialized fields missing (and yes, I do spell serialized the American way).  Turns 
      
    
    </summary>
    
      <category term="Dev" scheme="https://blog.newtonworkshop.com/categories/Dev/"/>
    
    
      <category term="c#" scheme="https://blog.newtonworkshop.com/tags/c/"/>
    
      <category term="serialization" scheme="https://blog.newtonworkshop.com/tags/serialization/"/>
    
  </entry>
  
  <entry>
    <title>Yes, sir. That&#39;s what serialization is and that&#39;s why it&#39;s such an important concept because pecans serialize an object data from one machine to another joke about a database.</title>
    <link href="https://blog.newtonworkshop.com/2019/01/28/speech-to-text-test/"/>
    <id>https://blog.newtonworkshop.com/2019/01/28/speech-to-text-test/</id>
    <published>2019-01-28T17:35:13.000Z</published>
    <updated>2019-02-04T13:31:58.210Z</updated>
    
    <content type="html"><![CDATA[<p>So in the process of starting this blog, I started recording some audio files while driving to and from work - the idea being to capture my thoughts and ideas while they‚Äôre still fresh in my mind. </p><p>Then, when it came to writing my first post, I went looking for software to <strong>transcribe</strong> my recordings.  To my dismay, there was nothing free out there that could transcribe from a recorded file - only from streaming speech - as in speaking into a microphone.</p><h2 id="No-problem-I‚Äôm-a-programmer-I‚Äôll-make-my-own-transcriber"><a href="#No-problem-I‚Äôm-a-programmer-I‚Äôll-make-my-own-transcriber" class="headerlink" title="No problem! I‚Äôm a programmer, I‚Äôll make my own transcriber!"></a>No problem! I‚Äôm a programmer, I‚Äôll make my own transcriber!</h2><p>Of course, by <em>‚ÄúMake my own‚Äù</em>, I actually mean <em>‚ÄúGo and find someone elses code that I can use‚Äù</em>‚Ä¶</p><p>First hit on nuget was <a href="https://www.nuget.org/packages/Google.Cloud.Speech.V1/1.1.0-beta03" target="_blank" rel="noopener"><strong><em>Google.Cloud.Speech API</em></strong></a>.  The API is pretty amazing - so simple from the C# side. Even the authentication was easy to set up and pretty much automated.  Get the beta, because it has the <em>punctuation</em> functionality and some other cool new stuff since V1.1.</p><blockquote><p>If you wanna test the API out just for fun - head to <a href="https://cloud.google.com/speech-to-text/" target="_blank" rel="noopener">this link</a> where you can upload files and see the results.  I tested it with these sounds from <a href="https://www.soundboard.com/sb/nacho_libre_movie_quotes" target="_blank" rel="noopener">Nacho Libre</a> - works a charm! üòÅ</p></blockquote><p>If you want to skip all the cody bits, you can go straight to the <a href="#the-results"><strong>results</strong></a> of my <em>amazing</em> test.</p><p>To be able to use the API there are a couple of things you have to do.  I‚Äôm not running through these steps in any detail because the Google Cloud console UI is pretty easy to get around and there‚Äôs also lots of <a href="https://cloud.google.com/docs/" target="_blank" rel="noopener">good documentation</a>.</p><h4 id="1-Get-a-Google-Account"><a href="#1-Get-a-Google-Account" class="headerlink" title="1. Get a Google Account"></a>1. Get a Google Account</h4><h4 id="2-Start-a-Google-Cloud-free-trial"><a href="#2-Start-a-Google-Cloud-free-trial" class="headerlink" title="2. Start a Google Cloud free trial"></a>2. Start a <a href="https:\\cloud.google.com" target="_blank" rel="noopener">Google Cloud</a> free trial</h4><ul><li>You do have to provide Credit/Debit card details but Google swear that you won‚Äôt be charged a cent until you manually activate billing. I trust them ü§∑‚Äç</li></ul><h4 id="3-Create-a-Service-Account-in-your-Google-Cloud-Console"><a href="#3-Create-a-Service-Account-in-your-Google-Cloud-Console" class="headerlink" title="3. Create a Service Account in your Google Cloud Console"></a>3. Create a Service Account in your Google Cloud Console</h4><ul><li>Give yourself the <strong>owner</strong> permission level so that you can do anything you want.</li></ul><h4 id="4-Enable-the-Cloud-Speech-API"><a href="#4-Enable-the-Cloud-Speech-API" class="headerlink" title="4. Enable the Cloud.Speech API"></a>4. Enable the Cloud.Speech API</h4><h4 id="5-Add-credentials-to-the-Cloud-Speech-API"><a href="#5-Add-credentials-to-the-Cloud-Speech-API" class="headerlink" title="5. Add credentials to the Cloud.Speech API"></a>5. Add credentials to the Cloud.Speech API</h4><h4 id="6-Download-your-credentials-as-a-JSON-file"><a href="#6-Download-your-credentials-as-a-JSON-file" class="headerlink" title="6. Download your credentials as a JSON file"></a>6. Download your credentials as a JSON file</h4><h4 id="7-Create-default-credentials-on-your-machine"><a href="#7-Create-default-credentials-on-your-machine" class="headerlink" title="7. Create default credentials on your machine"></a>7. Create default credentials on your machine</h4><p>Once you have your credentials, you need to create a environment variable that‚Äôs points the the location of the JSON file which contains your keys. They do tell you how to do this on the <a href="https://cloud.google.com/docs/authentication/getting-started" target="_blank" rel="noopener">Google Cloud docs</a>, but that didn‚Äôt work for me on my Windows 10 machine.</p><p>Instead, hit the Start key and search for ‚Äúenvironment‚Äù - then open up the Environment Variables UI. Under the section ‚ÄúUser Variables for [user name]‚Äù click ‚ÄúNew‚Ä¶‚Äù</p><img src="/2019/01/28/speech-to-text-test/google-cloud-enviro-window.png"><p>Add a variable named ‚ÄúGOOGLE_APPLICATION_CREDENTIALS‚Äù then click the ‚ÄúBrowse File‚Ä¶‚Äù button and browse to the JSON file you‚Äôve just downloaded.</p><img src="/2019/01/28/speech-to-text-test/google-cloud-enviro-new.png"><h2 id="The-Code"><a href="#The-Code" class="headerlink" title="The Code"></a>The Code</h2><p>Now that your default credentials are loaded on your machine, you can go ahead and start writing you Unit Tests. I created a *<em>.NET Standard Class Library</em> and a <em>MSTest</em> project.  The code is really straightforward.</p><p>If you‚Äôre trying to do recognition on a large file like mine with more than 1 minute of audio then you will need to upload the file to your cloud storage. <a href="https://cloud.google.com/speech-to-text/quotas" target="_blank" rel="noopener">Read this</a> for the allowed quotas, especially the line: <em>‚ÄúAudio longer than ~1 minute must use the uri field to reference an audio file in Google Cloud Storage.‚Äù</em></p><p>As you can see in the code below, I had to use the <em>LongRunningRecognize</em> method because of the file length, and I‚Äôm using the <em>FromStorageUri</em> method to retrieve the file from my cloud storage.</p><p>Notice the <em>EnableAutomaticPunctuation</em> property in the <em>RecognitionConfig</em> is set <em>true</em> - as mentioned before, this is only available in the beta.</p><p>Now you have to match your audio file type to the <em>RecognitionConfig.Encoding</em> type, and there are only <a href="https://cloud.google.com/speech-to-text/docs/encoding" target="_blank" rel="noopener">some formats</a> that the API supports.  I chose .flac basically because it‚Äôs first on the list.</p><p>I used <a href="https://audio.online-convert.com/convert-to-flac" target="_blank" rel="noopener">this service</a> to convert my MP3 to Flac and it worked really well.</p><img src="/2019/01/28/speech-to-text-test/convert-flac.png"><p>Use the <em>Change the bit resolution</em> to set the bitrate to something compatible - either 16 or 24 bit. I have no idea what the sampling rate is for so I just chose 16000 Hz. Also, the API seems to only work with <em>mono</em> audio - so use the <em>Change audio channels</em> option there too.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Google.Cloud.Speech.V1;</span><br><span class="line"><span class="keyword">using</span> Google.LongRunning;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> Google.Cloud.Speech.V1.RecognitionConfig.Types;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SpeechRecordingToText</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SpeechToTextTest</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">LongSpeechRecognitionTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      <span class="keyword">var</span> audio = RecognitionAudio.FromStorageUri(<span class="string">"gs://jnt-dev-speech-to-text/what is programming 2.flac"</span>);</span><br><span class="line"></span><br><span class="line">      SpeechClient client = SpeechClient.Create();</span><br><span class="line">      RecognitionConfig config = <span class="keyword">new</span> RecognitionConfig</span><br><span class="line">      &#123;</span><br><span class="line">        Encoding = AudioEncoding.Flac,</span><br><span class="line">        SampleRateHertz = <span class="number">16000</span>,</span><br><span class="line">        LanguageCode = LanguageCodes.English.UnitedStates,</span><br><span class="line">        EnableAutomaticPunctuation = <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> operation = client.LongRunningRecognize(config, audio);</span><br><span class="line"></span><br><span class="line">      operation = operation.PollUntilCompleted();</span><br><span class="line"></span><br><span class="line">      LongRunningRecognizeResponse response = operation.Result;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> response.Results)</span><br><span class="line">      &#123;</span><br><span class="line">        sb.Append(r.Alternatives[<span class="number">0</span>].Transcript);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h4><p><strong>Make sure you that are running your unit tests (or IDE) as the user that you loaded the Environment Variable for, otherwise the automatic credentials won‚Äôt work.</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Tests_SpeechToText</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">TestClass</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></span><br><span class="line">  &#123;</span><br><span class="line">    [<span class="meta">TestMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestMethod2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      Console.WriteLine(<span class="keyword">new</span> SpeechRecordingToText.SpeechToTextTest().LongSpeechRecognitionTest());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Results"><a href="#The-Results" class="headerlink" title="The Results"></a>The Results</h2><p>The results were‚Ä¶ well‚Ä¶ not my best work‚Ä¶ it reads like the system log from Douglas Adams‚Äô <a href="https://hitchhikers.fandom.com/wiki/Infinite_Improbability_Drive" target="_blank" rel="noopener">Infinite Improbability Drive</a>:</p><blockquote><p>Okay where we were with object-oriented sterilization? Richard knows how to do because somebody is being very active and looking a bunch of codes. Reliable Parts of tick I‚Äôm not text with you have would have the the name of my objects and then the name of the different properties of math and the value. So you have every sort of of sterilization is broken down into That things can have a name an event. And then you can have a raised you can have collections of me. So if you would take that that‚Äôs and you would converted into that she realized text and then the Peugeot I‚Äôm sending it to my friends program engine, which is considered as an object in that language. Where‚Äôs my pregnant? in the programming languages, but they are just in the world of the okay. Yes, sir. That‚Äôs what serialization is and that‚Äôs why it‚Äôs such an important concept because pecans serialize an object data from one machine to another joke about a database. It‚Äôs a fairly similar will be used to seeing fall of data stored on. On your computer on your desktop simplest form of dates that you can really look at windows. all the equivalent in Mac You‚Äôll see the file extension. Txt. And you got some inside. What do bestie done GIF created a Text document that contains Unicode characters, which is that mapping. I was talking about earlier and each one of those characters is coming in 56. So 10 words would be one box. I-10 code four cases of be about 1 bucks best and that‚Äôs a simple fall so you can that is called that is how it is stored in a file and it‚Äôs cold and encoding to tell that day too hot. ohashi written and read in most cases it will be difficult to answer Unicode characters in a text file and now you can imagine that‚Äôs if I‚Äôve got a Word document when you open a Word document, that‚Äôs because Microsoft Word Is there any how to open that kind of file She tried to open a Word document. with a notepad Doesn‚Äôt know how to read a Word document. So you going to see a whole bunch of crazy characters that is trying to trying to convert binary data to text and it‚Äôs saying what does value to text. It‚Äôs out of the range of values that I‚Äôm expecting and so I‚Äôm just going to put this blockia. character use files full everything Play in memory on your hard drive. Quiznos the five star I‚Äôm all it does is read that file from beginning to end and that‚Äôs how you end up with Violin Memory. Databases you might have heard of file to sterilize everything to so much more efficient in SQL Server. It breaks the dead up into very efficient little Cloud Supreme them together. That‚Äôs basically like its own file system. and time is it? Can I get a full tank but just the first pick? Nike what the fastest what‚Äôs the what‚Äôs the difference? What‚Äôs the where‚Äôs the process? Okay. Okay, it‚Äôs not a big difference. But if you just a fish stick images, it‚Äôs not my car.</p></blockquote><p>At least it was fun.  Looks like I‚Äôll just have to transcribe all those notes myself‚Ä¶  </p><p>Hey, on the plus side - this is kinda why we start with Unit Tests right?</p><p>It amazes me how easy to integrate this whole API was - and maybe I‚Äôll get a chance to come back to this sometime and play around some more‚Ä¶ I‚Äôve still got $300 to spend this year!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So in the process of starting this blog, I started recording some audio files while driving to and from work - the idea being to capture 
      
    
    </summary>
    
      <category term="Dev" scheme="https://blog.newtonworkshop.com/categories/Dev/"/>
    
    
      <category term="c#" scheme="https://blog.newtonworkshop.com/tags/c/"/>
    
      <category term="random" scheme="https://blog.newtonworkshop.com/tags/random/"/>
    
  </entry>
  
</feed>
